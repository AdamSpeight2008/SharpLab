// script mode
using System;

var x = 5;
Console.WriteLine(x);

?=>

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Threading.Tasks;
[assembly: AssemblyVersion("0.0.0.0")]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[module: UnverifiableCode]
internal sealed class Script
{
    [StructLayout(LayoutKind.Auto)]
    private struct <<Initialize>>d__0 : IAsyncStateMachine
    {
        public int <>1__state;
        public AsyncTaskMethodBuilder<object> <>t__builder;
        public Script <>4__this;
        void IAsyncStateMachine.MoveNext()
        {
            object result;
            try
            {
                this.<>4__this.x = 5;
                Console.WriteLine(this.<>4__this.x);
                result = null;
            }
            catch (Exception exception)
            {
                this.<>1__state = -2;
                this.<>t__builder.SetException(exception);
                return;
            }
            this.<>1__state = -2;
            this.<>t__builder.SetResult(result);
        }
        [DebuggerHidden]
        void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)
        {
            this.<>t__builder.SetStateMachine(stateMachine);
        }
    }
    private int x;
    internal Task<object> <Initialize>()
    {
        Script.<<Initialize>>d__0 <<Initialize>>d__;
        <<Initialize>>d__.<>4__this = this;
        <<Initialize>>d__.<>t__builder = AsyncTaskMethodBuilder<object>.Create();
        <<Initialize>>d__.<>1__state = -1;
        AsyncTaskMethodBuilder<object> <>t__builder = <<Initialize>>d__.<>t__builder;
        <>t__builder.Start<Script.<<Initialize>>d__0>(ref <<Initialize>>d__);
        return <<Initialize>>d__.<>t__builder.Task;
    }
    private static void <Main>()
    {
        new Script().<Initialize>().GetAwaiter().GetResult();
    }
}